#!/usr/bin/env ruby

# -*- mode: shell -*- 

require 'fog'
require 'trollop'

options = Trollop::options do
  version "Necrosis 0.1.0 (c) Airbnb, Inc."
  banner  "Necrosis: the killing script"

  opt('aws_access_key',
      "aws access key",
      :type => String,
      :default => ENV['AWS_ACCESS_KEY']
      )

  opt('aws_secret_key',
      "aws secret key",
      :type => String,
      :default => ENV['AWS_SECRET_KEY']
      )

  opt('force', "force removal without confirmation", :short => "-f")
end

required_parameters = [
                       'aws_access_key',
                       'aws_secret_key',
                      ]

required_parameters.each do |arg|
  raise ArgumentError, "--#{arg.gsub('_','-')} needs to be specified on the commandline or set \
by the #{arg.upcase.gsub('-','_')} environment variable" if
    options[arg].nil? or ! options[arg]
end

raise ArgumentError, "you did not provide any instance ids to kill" if ARGV.size == 0

# a hash from instance_id => [ec2 instance objects]
to_kill = ARGV.inject({}) { |h, n| h[n] = []; h }

creds = {
  :provider => 'AWS',
  :aws_access_key_id => options['aws_access_key'],
  :aws_secret_access_key => options['aws_secret_key']}

f = Fog::Compute.new(creds)
f.describe_regions.body['regionInfo'].each do |regionInfo|
  creds[:region] = regionInfo['regionName']
  con = Fog::Compute.new(creds)
  con.servers.each do |server|
    to_kill[server.id] << server if to_kill.keys.include? server.id
  end
end


# kill the instances
to_kill.each do |id, servers|
  if servers.count == 0
    puts "No instance #{id} found"
    next
  end

  if servers.count > 1
    puts "Found multiple instances named #{id}"
    next
  end

  server = servers[0]
  tags = server.tags
  puts "Instance #{server.id} (#{server.state} in #{server.availability_zone})"
  puts "\tKey name: #{server.key_name}"
  puts "\tLaunched: #{server.created_at}"
  tags.keys.sort.each do |tag|
    puts "\t#{tag} : #{tags[tag]}"
  end

  kill = true
  unless options['force']
    puts "Terminate? (y/N)? "
    confirm = $stdin.gets
    kill = false unless confirm && confirm.chomp.downcase == 'y'
  end

  if kill
    server.destroy
    puts "Instance #{server.id} terminated"
  end
end
