#!/bin/bash -ex
#
# This script will bootstrap and run chef
#
# You need to specify a role, origin, git_key, branch name, and data
# bag secret info below
#
# Martin Rhoads


set -o pipefail


# ensure we were called by root
if [ $UID != 0 ]; then
  echo "this script needs to be run as root. exiting..."
  exit 1
fi


# redirect stdout to /var/log/init
exec > /var/log/init

# redirect stderr to /var/log/init.err
exec 2> /var/log/init.err


##
## settings
##


chef_version=11.4.0
chef_dir=/etc/chef
role=<%= @chef_role %>
origin=<%= @git_origin %>
branch=<%= @git_branch %>
git_key='<%= @git_key_contents %>'
data_bag_secret='<%= @chef_data_bag_secret %>'


##
## common function
##


update() {
  echo updating apt repo
  apt-get update 1>&2
}


install() {
  if ! (dpkg -l | awk '{print $2}' | grep -q ^$1$ ) ; then
    echo installing $1...
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y $1 1>&2
  fi
}


get_instance_id() {
  instance_id=`curl --retry 5 --retry-delay 5 169.254.169.254/latest/meta-data/instance-id` 1>&2
  echo instance_id is $instance_id
}


install_chef() {
  if ! which chef-solo > /dev/null ; then
    echo installing chef via omnibus...
    curl -L --silent https://www.opscode.com/chef/install.sh | sudo bash -s -- -v $chef_version  1>&2
  else
    echo chef is already installed
  fi
}


update_repo() {
  echo -e "$git_key" > $keyfile
  chmod 0400 $keyfile

  echo "ssh -i $keyfile -o StrictHostKeyChecking=no \$1 \$2" > $git_wrapper
  chmod 0500 $git_wrapper

  mkdir -p $(dirname $repo_dir)
  if [ ! -d $repo_dir ]; then
    echo "downloading cookbook repo..."
    GIT_SSH=$git_wrapper git clone --branch $branch --depth 1 $origin $repo_dir
  else
    echo "cookbook repo already exists"
  fi

  echo "done updating code"
}


configure_chef() {
  echo "saving current branch ($branch) and role ($role)"
  echo "$branch" > $branchfile
  chmod 644 $branchfile

  echo "$role" > $rolefile
  chmod 644 $rolefile

  echo "configuring chef solo..."
  cat<<EOF > ${chef_dir}/solo.rb
log_level        :info
log_location     STDOUT
cookbook_path "$repo_dir/cookbooks"
role_path "$repo_dir/roles"
data_bag_path "$repo_dir/data_bags"
json_attribs "${jsonfile}"
EOF

  echo -e "$data_bag_secret" > ${chef_dir}/encrypted_data_bag_secret
  echo "chef configured"
}


configure_converger() {
  converge=${chef_dir}/src/scripts/converge.sh
  chmod 0544 ${converge}
  ln -s ${converge} /usr/local/bin/converge
}

configure_chef_daemon() {
  cat<<EOF > /etc/init/chef-solo.conf
description     "chef-solo"
author          "Martin Rhoads"
start on networking
script
chef-solo --interval 600 --splay 600  | logger -t chef-solo 2>&1
end script
respawn
EOF
}


run_chef() {
  echo "doing initial chef run..."
  /usr/local/bin/converge 1>&2
  echo "initial chef run complete"
}

start_chef_daemon() {
  start chef-solo
}


##
## main
##

#some derived vars
repo_dir=${chef_dir}/src
keyfile=${chef_dir}/git_key
rolefile=${chef_dir}/role
branchfile=${chef_dir}/branch
jsonfile=${chef_dir}/solo.json
git_wrapper=${chef_dir}/git_wrapper

echo "starting chef bootstrapping..."
mkdir -p ${chef_dir}
update
install curl
install git
get_instance_id
install_chef
update_repo
configure_chef
configure_converger
run_chef

configure_chef_daemon
# start_chef_daemon


##
## exit
##


echo "ran successfully:)"
