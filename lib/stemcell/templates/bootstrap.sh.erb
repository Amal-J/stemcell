#!/bin/bash -ex
#
# This script will bootstrap and run chef
#
# You need to specify a role, origin, git_key, branch name, and data
# bag secret info below
#
# Martin Rhoads


set -o pipefail


# ensure we were called by root
if [ $UID != 0 ]; then
  echo "this script needs to be run as root. exiting..."
  exit 1
fi


# redirect stdout to /var/log/init
exec > /var/log/init

# redirect stderr to /var/log/init.err
exec 2> /var/log/init.err


##
## settings 
##


repo_dir=/etc/chef/src
role=<%= @chef_role %>
origin=<%= @git_origin %>
branch=<%= @git_branch %>
git_key='<%= @git_key_contents %>'
data_bag_secret='<%= @chef_data_bag_secret %>'


##
## common function
##


update() {
  echo updating apt repo
  apt-get update 1>&2
}


install() {
  if ! (dpkg -l | awk '{print $2}' | grep -q ^$1$ ) ; then
    echo installing $1...
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y $1 1>&2
  fi
}


get_instance_id() {
  instance_id=`curl --retry 5 --retry-delay 5 169.254.169.254/latest/meta-data/instance-id` 1>&2
  echo instance_id is $instance_id
}


install_chef() {
  if ! which chef-solo > /dev/null ; then 
    echo installing chef via omnibus...
    curl -L --silent https://www.opscode.com/chef/install.sh | sudo bash -s -- -v 11.2.0  1>&2
  else 
    echo chef is already installed
  fi
}


update_repo() {
  git_wrapper=/etc/chef/git_wrapper
  local keyfile=/etc/chef/git_key
  mkdir -p $(dirname $repo_dir)
  if [ -d $repo_dir ]; then 
    echo updating source...
    (cd $repo_dir && GIT_SSH=$git_wrapper git fetch && git reset --hard origin/$branch && git clean -fdx)
  else
    echo -e "$git_key" > $keyfile
    chmod 0400 $keyfile
    echo "ssh -i $keyfile  -o StrictHostKeyChecking=no \$1 \$2" > $git_wrapper
    chmod 0500 $git_wrapper
    echo downloading cookbook repo...
    GIT_SSH=$git_wrapper git clone --branch $branch --depth 1 $origin $repo_dir
  fi
  echo done updating code
}


configure_chef() {
  echo configuring chef...
  mkdir -p /etc/chef
  if [ -f $repo_dir/roles/${branch}.rb ]; then
    echo "setting runlist to role[$branch],role[$role]"
    cat<<EOF>/etc/chef/solo.json
{
  "run_list": [
    "role[$branch]",
    "role[$role]"
  ],
  "branch": "$branch"
}
EOF
  else
    echo "setting runlist to role[$role]"
    cat<<EOF>/etc/chef/solo.json
{
  "run_list": "role[$role]",
  "branch": "$branch"
}
EOF
  fi

  cat<<EOF>/etc/chef/solo.rb
log_level        :info
log_location     STDOUT
cookbook_path "$repo_dir/cookbooks"
role_path "$repo_dir/roles"
data_bag_path "$repo_dir/data_bags"
json_attribs '/etc/chef/solo.json'
EOF
  echo -e "$data_bag_secret" > /etc/chef/encrypted_data_bag_secret
  echo chef configured
}


configure_converger() {
cat<<EOF>/usr/local/bin/converge
#!/bin/bash -e

cd $repo_dir
GIT_SSH=$git_wrapper git fetch
git reset --hard origin/$branch
git clean -fdx
chef-solo
EOF
  chmod 0544 /usr/local/bin/converge
}


configure_chef_daemon() {
  cat<<EOF>/etc/init/chef-solo.conf
description     "chef-solo"
author          "Martin Rhoads"
start on networking
script
chef-solo --interval 600 --splay 600  | logger -t chef-solo 2>&1
end script
respawn
EOF
}


run_chef() {
  echo running chef-solo...
  chef-solo 1>&2
  echo done running chef-solo
}


start_chef_daemon() {
  start chef-solo
}


##
## main
##


echo starting chef bootstrapping...
update
install curl
install git
get_instance_id
install_chef
update_repo
configure_chef
configure_converger
run_chef
configure_chef_daemon
# start_chef_daemon


##
## exit
##


echo "ran successfully:)"
